<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mybatis">
	
	<insert id="m1">
		insert into tblAddress values (seqAddress.nextVal, '홍길동', 20, '서울시', 'm')
	</insert>
	
	<delete id="m2" parameterType="String"><!-- MyBatisDAOImpl의 m2 -->
		delete from tblAddress where seq = #{seq}
	</delete>
	
	<!-- hashmap 활용 -->
	<!-- key값만 적으면 알아서 꺼내온다. -->
	<!-- 꼭 플네임 패키지로 지정해서 넣어줘야 한다. -->
	<insert id="m3" parameterType="java.util.HashMap">
		insert into tblAddress values (seqAddress.nextVal, #{name}, #{age}, #{address}, #{gender})
	</insert>
	
	<!-- DTO 활용 -->
	<insert id="add" parameterType="com.test.mybatis.dto.MyBatisDTO">
		insert into tblAddress 
			values (seqAddress.nextVal, #{name}, #{age}, #{address}, #{gender})
	</insert>
	
	<select id="m4" resultType="Integer">
		select count(*) from tblAddress
	</select>
	
	<select id="m5" parameterType="String" resultType="com.test.mybatis.dto.MyBatisDTO">
		select * from tblAddress where seq = #{seq}
	</select>
	
	<select id="m6" resultType="String">
		select name from tblAddress
	</select>
	
	<select id="m7" resultType="com.test.mybatis.dto.MyBatisDTO">
	
		select * from tblAddress
	</select>
	
	<!-- #은 데이터를 가져오고 $는 상관없이 전부 가져온다. -->
	<select id="m8" resultType="Integer" parameterType="String">
		<!-- select count(*) from #{table} -->
		select count(*) from ${table}
	</select>
	
	<select id="m9" resultType="com.test.mybatis.dto.MyBatisDTO">
		<!-- select * from tblAddress where age &lt; 25 -->
		<!-- select * from tblAddress where age &lt;= 25 -->
		select * from tblAddress 
		<![CDATA[
		where age < 25
		]]>
	</select>
	
	<select id="m10" parameterType="String" resultType="dto">
	
		select * from tblAddress 
			where address like '%' || #{search} || '%'
			<!-- where address like '%${search}%' -->	
			
			<!-- 
			search > 서울
			where address like '%서울%'
			
			search > "%" or 1=1 or '%'
			where address like '%%' or 1=1 or ''='%%' 
			-->

	</select>
	
	
	<!-- seq정렬순으로 출력 -->
	<select id="m11" resultType="dto" parameterType="String">
		<!-- 
		select
			*
		from tblAddress
			where gender = #{gender}
			order by seq asc 
		-->
		
		<if test="gender == 'm'.toString()">
		select
			*
		from tblAddress
			where gender = 'm'
				order by seq asc
		</if>

		<if test='gender == "f"'>
		select
			*
		from tblAddress
			where gender = 'f'
				order by seq asc				
		</if>
		
		<if test='gender == null'>
		select
			*
		from tblAddress
				order by seq asc				
		</if>
		
	</select>
	
	<!-- 기본적인 동적 쿼리 만드는 방법 -->
	<select id="m12" resultType="dto" parameterType="String">
	
		<!-- 
		select
			*
		from tblAddress
			<if test="gender != null">
			where gender = #{gender}
			</if>
				order by seq asc	 
		-->
		
		select
			*
		from tblAddress
			where age >= 3
			<if test="gender != null">
			and gender = #{gender}
			</if>
				order by seq asc	

	</select>
	
	<select id="m13" resultType="dto" parameterType="dto">
	
		<!-- 
		<if test="gender == null and address == null">
		select * from tblAddress
		</if>
		
		<if test="gender != null and address == null">
		select * from tblAddress
			where gender = #{gender}
		</if>
		
		<if test="gender == null and address != null">
		select * from tblAddress
			where address like '%' || #{address} || '%'	
		</if>
		
		<if test="gender != null and address != null">
		select * from tblAddress
			where gender = #{gender} and address like '%' || #{address} || '%'	
		</if> 
		-->
		
		<!-- 
		select * from tblAddress
			where
			 	<if test="gender != null">
				gender = #{gender} 
				</if>
				
				<if test="address != null">
				and address like '%' || #{address} || '%'
				</if>	 
		-->
		
		select * from tblAddress
			where
				1 = 1
			
			 	<if test="gender != null">
				and gender = #{gender} 
				</if>
				
				<if test="address != null">
				and address like '%' || #{address} || '%'
				</if>	
		
		</select>
	
		<select id="m14" resultType="dto" parameterType="Integer">
	
		select
			<if test="type == 1">
			name, age
			</if>
			<if test="type == 2">
			name, gender, address
			</if>
			<if test="type == null">
			*
			</if>
		from tblAddress
	
		</select>
		
		<select id="m15" resultType="dto" parameterType="map">
			
			 <!-- select * from tblAddress
		 		where ${column} = #{word} -->
		 		<!-- where 컬럼명 = 값 -->
		 		
		 	<!-- where 태그는 조건이 있으면 형성이 되고 없으면 자동으로 없어진다. -->
		 	<!-- 
			select * from tblAddress
			<choose>
				<when test="column == 'age'">
				where age >= #{word}
				</when>
				<when test="column == 'address'">
				where address like '%' || #{word} || '%'
				</when>
				<otherwise>
				where ${column} = #{word}
				</otherwise>
			</choose> 
		-->
		 	select * from tblAddress
				<where>
					<if test="column == 'age'">
					age >= #{word}
					</if>
					<if test="column == 'address'">
					address like '%' || #{word} || '%'
					</if>
					<if test="column != null and column != 'age' and column != 'address'">
					${column} = #{word}
					</if>
				</where>	
		</select>
		
		<select id="m16" resultType="dto" parameterType="dto">
			
	<!-- <where> 태그는 컨텐츠의 내용 중 "and"나 "or"로 시작하면 그 'and"나 "or"을 자공으로 삭제한다.(문맥에 맞춰서) -->
			select * from tblAddress
			<where>
				<if test="age != null">
					and age >= #{age}
				</if>
				<if test="gender != null">
					and gender = #{gender}
				</if>
			</where>
		</select>
		
		
		<!-- update에서 set 활용(,는 set에서 알아서 없애준다.) -->
		<update id="m17" parameterType="dto">
			
			update tblAddress
				<set>
				<if test="name != null">name = #{name},</if>
				<if test="age != null">age = #{age},</if>
				<if test="address != null">address = #{address},</if>
				<if test="gender != null">gender = #{gender}</if>
				</set>
					where seq = #{seq}
		</update>
		
		
		<select id="m18" resultType="dto" parameterType="list">
		
			<!-- 
			select * from tblAddress
				where name = '강아지' or name = '고양이' or name = '타조'	
			 -->
			 
			 <!-- 이걸 동적으로 만들기 - 다음
			 select * from tblAddress
				where name in('강아지','고양이','타조') 
			 -->	
			 
			 <!-- 이렇게는 사용 불가 - 다음
			 select * from tblAddress
				<where>
					<foreach collection="name" item="item" index="index">
						#{item}
					</foreach>
				</where> 
			-->
			
			<!-- open은 시작 할때 한구문 넣기, close는 open을 닫는 문법, separator는 중간에 넣어주는 문법 -->
			select * from tblAddress
			<where>
				<foreach collection="list" item="item" open="name in (" close=")" separator=",">
					#{item}
				</foreach>
			</where> 

		
		</select>

</mapper>




























